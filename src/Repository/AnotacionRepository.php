<?php

namespace App\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use App\clases\general\Fecha;


/**
 * AnotacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnotacionRepository extends \Doctrine\ORM\EntityRepository
{
	public function getPaginateAnotaciones($fechaInicio,$fechaFin,$tipoFecha,$cuenta,$categoria,$subcategoria,$agrupacion,$campoOrden = "a.fechaGasto",$orden="DESC",$tamanyo = 3,$paginaActual = 1){
     	$em=$this->getEntityManager();
		if (!$cuenta){
			$cuenta = $em->getRepository("App:Cuenta")->find(1);
		}
        $filtros="";
        if ($categoria!=null) {
            $filtros .= " AND a.clase = :clase";
        }
        if ($subcategoria!=null) {
            $filtros .= " AND a.subclase = :subclase";
        }
        if ($agrupacion!=null) {
            $filtros .= " AND a.agrupacion = :agrupacion";
        }


        $dql = "SELECT a,c,s,v FROM App\Entity\Anotacion a LEFT JOIN a.clase c LEFT JOIN a.subclase s LEFT JOIN a.version v LEFT JOIN a.formaPago fp
				WHERE a.$tipoFecha >= :fechaInicio and a.$tipoFecha <= :fechaFin AND a.cuenta=:cuenta AND a.borrado=false $filtros
				 ORDER BY $campoOrden $orden";

		$query = $em->createQuery($dql)
				               ->setParameter('fechaInicio',$fechaInicio)
							   ->setParameter('fechaFin',$fechaFin)
							   ->setParameter('cuenta',$cuenta)
                               ->setFirstResult($tamanyo * ($paginaActual - 1))
                               ->setMaxResults($tamanyo);
                 if ($categoria!=null) $query->setParameter ('clase', $categoria);
		 if ($subcategoria!=null) $query->setParameter ('subclase', $subcategoria);
                 if ($agrupacion!=null) $query->setParameter ('agrupacion', $agrupacion);


        $paginator = new Paginator($query, $fetchJoinCollection = true);

        return $paginator;
    }

	public function getAllAnotacionesSinClasificar(){
     	$em=$this->getEntityManager();
        $dql = "SELECT a,c,s FROM App\Entity\Anotacion a LEFT JOIN a.clase c LEFT JOIN a.subclase s
				WHERE a.clase IS NULL or a.subclase IS NULL AND a.borrado=false
				ORDER BY a.fechaCargo DESC";

		$query = $em->createQuery($dql);
		$sql = $query->getSQL();
		return $query->getResult();
    }




	public function hasAnotaciones($cuenta,$version,$anyo,$mes){

		$stringFecha = "$anyo-$mes-01";
		$fechaInicio = new Fecha($stringFecha);
		$fechaInicio->primerDiaMes();
		$fechaFin = new Fecha($stringFecha);
		$fechaFin->ultimoDiaMes();



		$em=$this->getEntityManager();
        $dql = "SELECT a,v FROM App\Entity\Anotacion a join a.version v WHERE v.id = :version AND a.fechaCargo BETWEEN :fechaInicio AND :fechaFin AND a.cuenta=:cuenta AND a.borrado=false";
        $query = $em->createQuery($dql);
		$query->setParameter('version', $version);
		$query->setParameter('fechaInicio', $fechaInicio);
		$query->setParameter('fechaFin', $fechaFin);
		$query->setParameter('cuenta', $cuenta);
		if ($query->getResult()){
			return true;
		}
			return false;

	}

	public function getAnotacionesAgrupadas($cuenta,$version,$anyo,$mes){
		$stringFecha = "$anyo-$mes-01";
		$fechaInicio = new Fecha($stringFecha);
		$fechaInicio->primerDiaMes();
		$fechaFin = new Fecha($stringFecha);
		$fechaFin->ultimoDiaMes();

		$em=$this->getEntityManager();
        $dql = "SELECT c.id AS idClase,c.descripcion AS descripcionClase,s.id AS idSubclase,s.descripcion AS descripcionSubclase ,sum(a.importe) AS importe
				FROM App\Entity\Anotacion a join a.version v join a.clase c join a.subclase s
				WHERE v.id = :version AND a.fechaCargo BETWEEN :fechaInicio AND :fechaFin AND a.cuenta=:cuenta AND a.borrado=false
				GROUP BY c.id,s.id";
        $query = $em->createQuery($dql);

		$query->setParameter('version', $version);
		$query->setParameter('fechaInicio', $fechaInicio);
		$query->setParameter('fechaFin', $fechaFin);
		$query->setParameter('cuenta', $cuenta);

		$registros = $query->execute();
		$res = array();
		$totales = array();

		foreach ($registros as $registro){
			$res[$registro['idSubclase']] = $registro['importe'];
			$totales[$registro['idClase']] = isset($totales[$registro['idClase']])?$totales[$registro['idClase']]+=$registro['importe']:$registro['importe'];
		}
		return array('res'=>$res,'totales'=>$totales);

	}


	public function getAnotacionesMes($cuenta,$anyo,$mes,$subclase){
		$stringFecha = "$anyo-$mes-01";
		$fechaInicio = new Fecha($stringFecha);
		$fechaInicio->primerDiaMes();
		$fechaFin = new Fecha($stringFecha);
		$fechaFin->ultimoDiaMes();

		$hayDefinitivo = $this->hasAnotaciones($cuenta,1,$anyo,$mes);
		$version = $hayDefinitivo?1:2;

		$em=$this->getEntityManager();
        $dql = "SELECT a FROM App\Entity\Anotacion a join a.version v join a.clase c join a.subclase s
				WHERE v.id = :version AND a.fechaCargo BETWEEN :fechaInicio AND :fechaFin AND s.id = :subclase AND a.cuenta=:cuenta AND a.borrado=false
				order by a.fechaCargo ASC";
        $query = $em->createQuery($dql);

		$query->setParameter('version', $version);
		$query->setParameter('fechaInicio', $fechaInicio);
		$query->setParameter('fechaFin', $fechaFin);
		$query->setParameter('subclase', $subclase);
		$query->setParameter('cuenta', $cuenta);

		$registros = $query->execute();

		return $registros;

	}



	public function getSaldoBancario($cuenta,$fecha){
		$em=$this->getEntityManager();
                if (!$cuenta){
			$cuenta = $em->getRepository("App:Cuenta")->find(1);
		}

		$dql="SELECT a FROM App\Entity\Anotacion a
			  WHERE a.cuenta=:cuenta AND a.fechaCargo<=:fecha and a.version=1 AND a.borrado=false order by a.fechaCargo DESC,a.id ASC";

		$query = $em->createQuery($dql);

		$query->setParameter('cuenta', $cuenta);
		$query->setParameter('fecha', $fecha);
		$registros = $query->getResult();

                if ($registros){
			$saldo = (float)$registros[0]->getSaldoBancario();
                        $fechaRes = $registros[0]->getFechaCargo();
		}
		 else {
			 $saldo = 0;
                         $fechaRes = null;
		}

		return array('saldo'=>$saldo,'fecha'=>$fechaRes);
	}

	public function getClasificacionFechaImporte($cuenta,$fecha,$importe){
		$em=$this->getEntityManager();
		$dql="SELECT a FROM App\Entity\Anotacion a join a.version v
			  WHERE v.id = 2 and a.cuenta=:cuenta AND a.fechaCargo<=:fecha and a.importe=:importe AND a.borrado=false";

		$query = $em->createQuery($dql);

		$query->setParameter('cuenta', $cuenta);
		$query->setParameter('fecha', $fecha);
		$query->setParameter('importe', $importe);
		$registros = $query->execute();
		if ($registros){
			$clase = $registros[0]->getClase();
			$subclase = $registros[0]->getSubclase();
			$concepto = $registros[0]->getConcepto();
			$agrupacion = $registros[0]->getAgrupacion();
			$formaPago = $registros[0]->getFormaPago();
		}
		 else {
			 $clase = null;
			 $subclase= null;
			 $concepto = null;
			 $agrupacion = null;
			 $formaPago = null;
		}
		return array('clase'=>$clase,'subclase'=>$subclase,'concepto'=>$concepto,'agrupacion'=>$agrupacion,'formaPago'=>$formaPago);
	}

        public function getSaldoMovimientos($cuenta,$version,$fechaDesde = null,$fechaHasta = null){
            $em=$this->getEntityManager();

            if (!$cuenta){
			$cuenta = $em->getRepository("App:Cuenta")->find(1);
		}
            $cadenaFechaDesde= $fechaDesde!=null?" AND a.fechaCargo>=:fechaDesde":"";
            $cadenaFechaHasta= $fechaHasta!=null?" AND a.fechaCargo<=:fechaHasta":"";



			$dql="SELECT sum(a.importe) FROM App\Entity\Anotacion a
			  WHERE a.cuenta=:cuenta AND a.version=:version AND a.borrado=false $cadenaFechaDesde $cadenaFechaHasta";
			$query = $em->createQuery($dql);
            $query->setParameter('cuenta', $cuenta);
            $query->setParameter('version', $version);
            if($fechaDesde!=null) $query->setParameter('fechaDesde', $fechaDesde);
            if($fechaHasta!=null) $query->setParameter('fechaHasta', $fechaHasta);


            return $query->getSingleScalarResult();
        }

        public function getSaldo($cuenta,$fecha){

            $datosSaldo = $this->getSaldoBancario($cuenta,$fecha);
            $saldoBancario = $datosSaldo['saldo'];

            $fechaSaldoBancario = new Fecha($datosSaldo['fecha']->format("Y-m-d"));

            if ($fechaSaldoBancario < $fecha){
		if ($fechaSaldoBancario!=null ) {
                    $fechaSaldoBancario -> modify("+ 1 day");
		}
                $saldoMovimientos = $this->getSaldoMovimientos($cuenta,2,$fechaSaldoBancario,$fecha);

            }
            else{
                $saldoMovimientos = 0;
            }
            //var_dump($saldoBancario."--".$saldoMovimientos);
            return $saldoBancario + $saldoMovimientos;

        }
		public function anularAnotacionesProvisionales($cuenta,$anyo,$mes){
			$stringFecha = "$anyo-$mes-01";
			$fechaInicio = new Fecha($stringFecha);
			$fechaInicio->primerDiaMes();
			$fechaFin = new Fecha($stringFecha);
			$fechaFin->ultimoDiaMes();

			$em=$this->getEntityManager();
			$dql = "UPDATE App\Entity\Anotacion a SET a.borrado = true
				WHERE a.version = :version AND a.fechaCargo BETWEEN :fechaInicio AND :fechaFin AND a.cuenta=:cuenta AND a.borrado=false";

			$query = $em->createQuery($dql);
			$query->setParameter('version', 2);
			$query->setParameter('fechaInicio', $fechaInicio);
			$query->setParameter('fechaFin', $fechaFin);
			$query->setParameter('cuenta', $cuenta);
			return $query->execute();
		}


    public function sumaImportes($fechaInicio,$fechaFin,$tipoFecha,$cuenta,$categoria,$subcategoria,$agrupacion){
        $em=$this->getEntityManager();
        if (!$cuenta){
			$cuenta = $em->getRepository("App:Cuenta")->find(1);
		}
        $filtros="";
        if ($categoria!=null) {
            $filtros .= " AND a.clase = :clase";
        }
        if ($subcategoria!=null) {
            $filtros .= " AND a.subclase = :subclase";
        }
        if ($agrupacion!=null) {
            $filtros .= " AND a.agrupacion = :agrupacion";
        }

        $dql = "SELECT sum(a.importe) as importe FROM App\Entity\Anotacion a LEFT JOIN a.clase c LEFT JOIN a.subclase s LEFT JOIN a.version v LEFT JOIN a.formaPago fp
		WHERE a.$tipoFecha >= :fechaInicio and a.$tipoFecha <= :fechaFin AND a.cuenta=:cuenta AND a.borrado=false $filtros";

        $query = $em->createQuery($dql)->setParameter('fechaInicio',$fechaInicio)->setParameter('fechaFin',$fechaFin)->setParameter('cuenta',$cuenta);
        if ($categoria!=null) $query->setParameter ('clase', $categoria);
	if ($subcategoria!=null) $query->setParameter ('subclase', $subcategoria);
        if ($agrupacion!=null) $query->setParameter ('agrupacion', $agrupacion);

        return $query->getOneOrNullResult();
         }
}
